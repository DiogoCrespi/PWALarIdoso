// Prisma Schema para Sistema Lar dos Idosos
// Base de dados: SQLite (arquivo local)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../database/lar_idosos.db"
}

// Tabela de Responsáveis (quem paga)
model Responsavel {
  id              Int      @id @default(autoincrement())
  nome            String
  cpf             String   @unique
  contatoTelefone String?
  contatoEmail    String?
  ativo           Boolean  @default(true)
  idosos          Idoso[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("responsaveis")
}

// Tabela de Idosos
model Idoso {
  id                   Int          @id @default(autoincrement())
  nome                 String
  cpf                  String?      @unique
  dataNascimento       DateTime?
  responsavelId        Int
  responsavel          Responsavel  @relation(fields: [responsavelId], references: [id])
  valorMensalidadeBase Float        // Valor que o idoso paga para estar no lar
  beneficioSalario     Float        @default(0) // Salário do idoso (usado para calcular 70% na NFSE)
  pagamentos           Pagamento[]
  notasFiscais         NotaFiscal[]
  ativo                Boolean      @default(true)
  observacoes          String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  @@map("idosos")
}

// Tabela de Pagamentos
model Pagamento {
  id                   Int       @id @default(autoincrement())
  idosoId              Int
  idoso                Idoso     @relation(fields: [idosoId], references: [id])
  mesReferencia        Int       // 1 a 12 (Janeiro a Dezembro)
  anoReferencia        Int       // 2025, 2026...
  valorPago            Float     @default(0)
  dataPagamento        DateTime?
  nfse                 String?   // Número da Nota Fiscal
  pagador              String?   // Nome da pessoa/empresa que efetuou o pagamento
  formaPagamento       String?   // Forma de pagamento (PIX, DINHEIRO, etc.)
  status               String    @default("PENDENTE") // PENDENTE, PARCIAL, PAGO
  valorDoacaoCalculado Float     @default(0)
  caminhoReciboDoacao  String?   // Caminho completo do arquivo DOCX gerado
  observacoes          String?
  notasFiscais         NotaFiscal[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@unique([idosoId, mesReferencia, anoReferencia])
  @@map("pagamentos")
}

// Tabela de Notas Fiscais
model NotaFiscal {
  id              Int       @id @default(autoincrement())
  numeroNFSE      String?   // Número da NFSE (pode ser nulo se criada automaticamente)
  dataPrestacao   DateTime? // Data da prestação de serviço
  dataEmissao     DateTime? // Data de emissão da NFSE
  discriminacao   String?   // Descrição do serviço
  valor           Float?    // Valor da nota
  nomePessoa      String?   // Nome da pessoa/empresa
  idosoId         Int       // ID do idoso relacionado
  idoso           Idoso     @relation(fields: [idosoId], references: [id])
  mesReferencia   Int       // Mês de referência (1-12)
  anoReferencia   Int       // Ano de referência
  arquivoOriginal String?   // Caminho do arquivo original (se upload)
  status          String    @default("RASCUNHO") // RASCUNHO, COMPLETA, PROCESSADA, CANCELADA
  pagamentoId     Int?      // ID do pagamento relacionado (se houver)
  pagamento       Pagamento? @relation(fields: [pagamentoId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("notas_fiscais")
}

// Tabela de Configurações do Sistema
model Configuracao {
  id        Int      @id @default(autoincrement())
  chave     String   @unique
  valor     String
  descricao String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("configuracoes")
}




