// ServiÃ§o de API que detecta se estÃ¡ rodando no Electron ou navegador
import { mockElectronAPI } from './mock-api';

// FunÃ§Ã£o para detectar se estÃ¡ rodando no Electron
function isElectron(): boolean {
  return !!(window && window.electronAPI);
}

// API unificada que usa Electron quando disponÃ­vel, senÃ£o usa mock
export const api = {
  // ResponsÃ¡veis
  responsaveis: {
    list: async () => {
      if (isElectron()) {
        console.log('ðŸ”Œ Usando API do Electron (banco real)');
        return await window.electronAPI.responsaveis.list();
      } else {
        console.log('ðŸŽ­ Usando Mock API (desenvolvimento)');
        return await mockElectronAPI.responsaveis.list();
      }
    },

    create: async (data: any) => {
      if (isElectron()) {
        console.log('ðŸ”Œ Criando no banco real via Electron');
        return await window.electronAPI.responsaveis.create(data);
      } else {
        console.log('ðŸŽ­ Criando no mock (desenvolvimento)');
        return await mockElectronAPI.responsaveis.create(data);
      }
    },

    update: async (id: number, data: any) => {
      if (isElectron()) {
        console.log('ðŸ”Œ Atualizando no banco real via Electron');
        return await window.electronAPI.responsaveis.update(id, data);
      } else {
        console.log('ðŸŽ­ Atualizando no mock (desenvolvimento)');
        return await mockElectronAPI.responsaveis.update(id, data);
      }
    },

    delete: async (id: number) => {
      if (isElectron()) {
        console.log('ðŸ”Œ Excluindo do banco real via Electron');
        return await window.electronAPI.responsaveis.delete(id);
      } else {
        console.log('ðŸŽ­ Excluindo do mock (desenvolvimento)');
        return await mockElectronAPI.responsaveis.delete(id);
      }
    },

    getById: async (id: number) => {
      if (isElectron()) {
        return await window.electronAPI.responsaveis.getById(id);
      } else {
        return await mockElectronAPI.responsaveis.getById(id);
      }
    },
  },

  // Idosos
  idosos: {
    list: async () => {
      if (isElectron()) {
        console.log('ðŸ”Œ Usando API do Electron (banco real)');
        return await window.electronAPI.idosos.list();
      } else {
        console.log('ðŸŽ­ Usando Mock API (desenvolvimento)');
        return await mockElectronAPI.idosos.list();
      }
    },

    create: async (data: any) => {
      if (isElectron()) {
        console.log('ðŸ”Œ Criando idoso no banco real via Electron');
        return await window.electronAPI.idosos.create(data);
      } else {
        console.log('ðŸŽ­ Criando idoso no mock (desenvolvimento)');
        return await mockElectronAPI.idosos.create(data);
      }
    },

    update: async (id: number, data: any) => {
      if (isElectron()) {
        console.log('ðŸ”Œ Atualizando idoso no banco real via Electron');
        return await window.electronAPI.idosos.update(id, data);
      } else {
        console.log('ðŸŽ­ Atualizando idoso no mock (desenvolvimento)');
        return await mockElectronAPI.idosos.update(id, data);
      }
    },

    delete: async (id: number) => {
      if (isElectron()) {
        console.log('ðŸ”Œ Excluindo idoso do banco real via Electron');
        return await window.electronAPI.idosos.delete(id);
      } else {
        console.log('ðŸŽ­ Excluindo idoso do mock (desenvolvimento)');
        return await mockElectronAPI.idosos.delete(id);
      }
    },

    getById: async (id: number) => {
      if (isElectron()) {
        return await window.electronAPI.idosos.getById(id);
      } else {
        return await mockElectronAPI.idosos.getById(id);
      }
    },
  },

  // Dashboard
  dashboard: {
    get: async (ano: number) => {
      if (isElectron()) {
        console.log('ðŸ”Œ Buscando dados do dashboard no banco real');
        return await window.electronAPI.dashboard.get(ano);
      } else {
        console.log('ðŸŽ­ Usando dados mock do dashboard');
        return await mockElectronAPI.dashboard.get(ano);
      }
    },
  },

  // Pagamentos
  pagamentos: {
    upsert: async (data: any) => {
      if (isElectron()) {
        console.log('ðŸ”Œ Salvando pagamento no banco real');
        return await window.electronAPI.pagamentos.upsert(data);
      } else {
        console.log('ðŸŽ­ Salvando pagamento no mock');
        return await mockElectronAPI.pagamentos.upsert(data);
      }
    },

    getByIdoso: async (idosoId: number, ano: number) => {
      if (isElectron()) {
        return await window.electronAPI.pagamentos.getByIdoso(idosoId, ano);
      } else {
        return await mockElectronAPI.pagamentos.getByIdoso(idosoId, ano);
      }
    },

    getById: async (id: number) => {
      if (isElectron()) {
        return await window.electronAPI.pagamentos.getById(id);
      } else {
        return await mockElectronAPI.pagamentos.getById(id);
      }
    },
  },

  // Recibos
  recibos: {
    gerarDoacao: async (pagamentoId: number) => {
      if (isElectron()) {
        console.log('ðŸ”Œ Gerando recibo real via Electron');
        return await window.electronAPI.recibos.gerarDoacao(pagamentoId);
      } else {
        console.log('ðŸŽ­ Simulando geraÃ§Ã£o de recibo');
        return await mockElectronAPI.recibos.gerarDoacao(pagamentoId);
      }
    },

    abrirPasta: async (tipo: 'doacao' | 'mensalidade') => {
      if (isElectron()) {
        return await window.electronAPI.recibos.abrirPasta(tipo);
      } else {
        return await mockElectronAPI.recibos.abrirPasta(tipo);
      }
    },
  },

  // ConfiguraÃ§Ãµes
  configuracoes: {
    list: async () => {
      if (isElectron()) {
        return await window.electronAPI.configuracoes.list();
      } else {
        return await mockElectronAPI.configuracoes.list();
      }
    },

    get: async (chave: string) => {
      if (isElectron()) {
        return await window.electronAPI.configuracoes.get(chave);
      } else {
        return await mockElectronAPI.configuracoes.get(chave);
      }
    },

    set: async (chave: string, valor: string) => {
      if (isElectron()) {
        return await window.electronAPI.configuracoes.set(chave, valor);
      } else {
        return await mockElectronAPI.configuracoes.set(chave, valor);
      }
    },
  },

  // Backup
  backup: {
    limparTodosOsDados: async () => {
      if (isElectron()) {
        console.log('ðŸ”Œ Limpando dados via Electron');
        return await window.electronAPI.backup.limparTodosOsDados();
      } else {
        console.log('ðŸŽ­ Limpando dados via mock');
        return await mockElectronAPI.backup.limparTodosOsDados();
      }
    },
    
    inicializarSistema: async () => {
      if (isElectron()) {
        console.log('ðŸ”Œ Inicializando sistema via Electron');
        return await window.electronAPI.backup.inicializarSistema();
      } else {
        console.log('ðŸŽ­ Inicializando sistema via mock');
        return await mockElectronAPI.backup.inicializarSistema();
      }
    },
    
    importarDadosDoCSV: async (csvContent: string) => {
      if (isElectron()) {
        console.log('ðŸ”Œ Importando dados via Electron');
        return await window.electronAPI.backup.importarDadosDoCSV(csvContent);
      } else {
        console.log('ðŸŽ­ Importando dados via mock');
        return await mockElectronAPI.backup.importarDadosDoCSV(csvContent);
      }
    },
    
    gerarCSV: async () => {
      if (isElectron()) {
        console.log('ðŸ”Œ Gerando backup real via Electron');
        return await window.electronAPI.backup.gerarCSV();
      } else {
        console.log('ðŸŽ­ Gerando backup mock');
        return await mockElectronAPI.backup.gerarCSV();
      }
    },
  },
};

// Configurar window.electronAPI para desenvolvimento
if (!isElectron()) {
  console.log('ðŸš€ Configurando API unificada para desenvolvimento...');
  (window as any).electronAPI = api;
  console.log('âœ… API unificada configurada!');
}

