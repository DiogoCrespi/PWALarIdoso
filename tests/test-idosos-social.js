import puppeteer from 'puppeteer';

async function testIdososSocial() {
  console.log('üèõÔ∏è Iniciando teste de idosos SOCIAL...');
  
  let browser;
  try {
    // Inicializar navegador
    browser = await puppeteer.launch({
      headless: false,
      slowMo: 100,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    await page.setViewport({ width: 1280, height: 720 });
    
    // Capturar logs
    const logs = [];
    page.on('console', msg => {
      logs.push(`[${msg.type()}] ${msg.text()}`);
    });
    
    console.log('üåê Navegando para a aplica√ß√£o...');
    await page.goto('http://localhost:5174', { waitUntil: 'networkidle0', timeout: 30000 });
    
    // Aguardar inicializa√ß√£o se aparecer
    try {
      await page.waitForSelector('text=Inicializando sistema...', { timeout: 5000 });
      console.log('‚è≥ Aguardando inicializa√ß√£o...');
      await page.waitForSelector('text=Inicializando sistema...', { state: 'hidden', timeout: 30000 });
    } catch (e) {
      console.log('‚ÑπÔ∏è Inicializa√ß√£o n√£o detectada, continuando...');
    }
    
    console.log('‚úÖ Aplica√ß√£o carregada!');
    
    let passedTests = 0;
    let failedTests = 0;

    // --- TESTE 1: Criar respons√°vel primeiro ---
    console.log('\nüß™ TESTE 1: Criando respons√°vel para teste');
    try {
      await page.click('text=Respons√°veis');
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await page.locator('button', { hasText: 'Novo Respons√°vel' }).click();
      await new Promise(resolve => setTimeout(resolve, 500));
      
      await page.fill('input[label="Nome Completo"]', 'Maria Social Teste');
      await page.fill('input[label="CPF"]', '111.222.333-44');
      await page.fill('input[label="Telefone"]', '(11) 99999-8888');
      await page.fill('input[label="Email"]', 'maria@social.com');
      
      await page.locator('button', { hasText: 'Salvar' }).click();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      console.log('‚úÖ Respons√°vel criado com sucesso');
      passedTests++;
    } catch (error) {
      console.log('‚ùå Erro ao criar respons√°vel:', error.message);
      failedTests++;
    }

    // --- TESTE 2: Criar idoso SOCIAL ---
    console.log('\nüß™ TESTE 2: Criando idoso SOCIAL');
    try {
      await page.click('text=Idosos');
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await page.locator('button', { hasText: 'Novo Idoso' }).click();
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Preencher dados b√°sicos
      await page.fill('input[label="Nome Completo"]', 'Jo√£o Social Silva');
      await page.fill('input[label="CPF/CNPJ do Idoso"]', '555.666.777-88');
      
      // Selecionar respons√°vel
      await page.locator('div[role="button"]', { hasText: 'Respons√°vel' }).click();
      await new Promise(resolve => setTimeout(resolve, 500));
      await page.locator('li', { hasText: 'Maria Social Teste' }).click();
      
      // Preencher benef√≠cio (sal√°rio)
      await page.fill('input[label="Benef√≠cio (Sal√°rio do Idoso)"]', '1518,00');
      
      // Selecionar tipo SOCIAL
      await page.locator('div[role="button"]', { hasText: 'Tipo do Idoso' }).click();
      await new Promise(resolve => setTimeout(resolve, 500));
      await page.locator('li', { hasText: 'SOCIAL' }).click();
      
      // Verificar se mensalidade foi preenchida automaticamente
      await new Promise(resolve => setTimeout(resolve, 1000));
      const mensalidadeValue = await page.inputValue('input[label="Valor da Mensalidade"]');
      
      if (mensalidadeValue.includes('1518')) {
        console.log('‚úÖ Mensalidade preenchida automaticamente para idoso SOCIAL');
        passedTests++;
      } else {
        console.log('‚ùå Mensalidade n√£o foi preenchida automaticamente');
        failedTests++;
      }
      
      // Verificar se campo mensalidade est√° desabilitado
      const isDisabled = await page.evaluate(() => {
        const input = document.querySelector('input[label="Valor da Mensalidade"]');
        return input ? input.disabled : false;
      });
      
      if (isDisabled) {
        console.log('‚úÖ Campo mensalidade desabilitado para idoso SOCIAL');
        passedTests++;
      } else {
        console.log('‚ùå Campo mensalidade n√£o est√° desabilitado');
        failedTests++;
      }
      
      // Salvar idoso
      await page.locator('button', { hasText: 'Salvar' }).click();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      console.log('‚úÖ Idoso SOCIAL criado com sucesso');
      passedTests++;
      
    } catch (error) {
      console.log('‚ùå Erro ao criar idoso SOCIAL:', error.message);
      failedTests++;
    }

    // --- TESTE 3: Criar pagamento para idoso SOCIAL ---
    console.log('\nüß™ TESTE 3: Criando pagamento para idoso SOCIAL');
    try {
      await page.click('text=Dashboard');
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Clicar no bot√£o de novo pagamento
      await page.locator('button', { hasText: 'Novo Pagamento' }).click();
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Selecionar idoso SOCIAL
      await page.locator('div[role="button"]', { hasText: 'Selecionar Idoso' }).click();
      await new Promise(resolve => setTimeout(resolve, 500));
      await page.locator('li', { hasText: 'Jo√£o Social Silva' }).click();
      
      // Preencher valor pago (mesmo valor do benef√≠cio)
      await page.fill('input[label="Valor Pago"]', '1518,00');
      
      // Preencher outros campos
      await page.fill('input[label="Pagador"]', 'Prefeitura Municipal');
      await page.selectOption('select[label="Forma de Pagamento"]', 'Transfer√™ncia banc√°ria');
      
      // Salvar pagamento
      await page.locator('button', { hasText: 'Salvar' }).click();
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Verificar se n√£o gerou recibo (deve mostrar mensagem espec√≠fica)
      const snackbarText = await page.textContent('.MuiSnackbar-root .MuiAlert-message');
      
      if (snackbarText && snackbarText.includes('SOCIAL')) {
        console.log('‚úÖ Mensagem correta para idoso SOCIAL:', snackbarText);
        passedTests++;
      } else {
        console.log('‚ùå Mensagem incorreta ou recibo gerado para idoso SOCIAL');
        failedTests++;
      }
      
      console.log('‚úÖ Pagamento para idoso SOCIAL criado com sucesso');
      passedTests++;
      
    } catch (error) {
      console.log('‚ùå Erro ao criar pagamento para idoso SOCIAL:', error.message);
      failedTests++;
    }

    // --- TESTE 4: Criar idoso REGULAR para compara√ß√£o ---
    console.log('\nüß™ TESTE 4: Criando idoso REGULAR para compara√ß√£o');
    try {
      await page.click('text=Idosos');
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      await page.locator('button', { hasText: 'Novo Idoso' }).click();
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Preencher dados b√°sicos
      await page.fill('input[label="Nome Completo"]', 'Ana Regular Santos');
      await page.fill('input[label="CPF/CNPJ do Idoso"]', '999.888.777-66');
      
      // Selecionar respons√°vel
      await page.locator('div[role="button"]', { hasText: 'Respons√°vel' }).click();
      await new Promise(resolve => setTimeout(resolve, 500));
      await page.locator('li', { hasText: 'Maria Social Teste' }).click();
      
      // Preencher benef√≠cio (sal√°rio)
      await page.fill('input[label="Benef√≠cio (Sal√°rio do Idoso)"]', '1518,00');
      
      // Preencher mensalidade (valor diferente)
      await page.fill('input[label="Valor da Mensalidade"]', '3225,00');
      
      // Selecionar tipo REGULAR
      await page.locator('div[role="button"]', { hasText: 'Tipo do Idoso' }).click();
      await new Promise(resolve => setTimeout(resolve, 500));
      await page.locator('li', { hasText: 'REGULAR' }).click();
      
      // Verificar se campo mensalidade est√° habilitado
      const isEnabled = await page.evaluate(() => {
        const input = document.querySelector('input[label="Valor da Mensalidade"]');
        return input ? !input.disabled : false;
      });
      
      if (isEnabled) {
        console.log('‚úÖ Campo mensalidade habilitado para idoso REGULAR');
        passedTests++;
      } else {
        console.log('‚ùå Campo mensalidade n√£o est√° habilitado para idoso REGULAR');
        failedTests++;
      }
      
      // Salvar idoso
      await page.locator('button', { hasText: 'Salvar' }).click();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      console.log('‚úÖ Idoso REGULAR criado com sucesso');
      passedTests++;
      
    } catch (error) {
      console.log('‚ùå Erro ao criar idoso REGULAR:', error.message);
      failedTests++;
    }

    // --- TESTE 5: Criar pagamento para idoso REGULAR ---
    console.log('\nüß™ TESTE 5: Criando pagamento para idoso REGULAR');
    try {
      await page.click('text=Dashboard');
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Clicar no bot√£o de novo pagamento
      await page.locator('button', { hasText: 'Novo Pagamento' }).click();
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // Selecionar idoso REGULAR
      await page.locator('div[role="button"]', { hasText: 'Selecionar Idoso' }).click();
      await new Promise(resolve => setTimeout(resolve, 500));
      await page.locator('li', { hasText: 'Ana Regular Santos' }).click();
      
      // Preencher valor pago (maior que o benef√≠cio para gerar doa√ß√£o)
      await page.fill('input[label="Valor Pago"]', '3225,00');
      
      // Preencher outros campos
      await page.fill('input[label="Pagador"]', 'Fam√≠lia Santos');
      await page.selectOption('select[label="Forma de Pagamento"]', 'Transfer√™ncia banc√°ria');
      
      // Salvar pagamento
      await page.locator('button', { hasText: 'Salvar' }).click();
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Verificar se gerou recibo (deve mostrar mensagem sobre doa√ß√£o)
      const snackbarText = await page.textContent('.MuiSnackbar-root .MuiAlert-message');
      
      if (snackbarText && snackbarText.includes('doa√ß√£o')) {
        console.log('‚úÖ Recibo de doa√ß√£o gerado para idoso REGULAR:', snackbarText);
        passedTests++;
      } else {
        console.log('‚ùå Recibo n√£o foi gerado para idoso REGULAR');
        failedTests++;
      }
      
      console.log('‚úÖ Pagamento para idoso REGULAR criado com sucesso');
      passedTests++;
      
    } catch (error) {
      console.log('‚ùå Erro ao criar pagamento para idoso REGULAR:', error.message);
      failedTests++;
    }

    console.log('\nüéâ Testes conclu√≠dos!');
    console.log(`üìä Resumo: ${passedTests} testes passaram, ${failedTests} falharam.`);
    
    if (failedTests > 0) {
      console.log('\n‚ùå Alguns testes falharam. Verifique os logs acima.');
      return false;
    } else {
      console.log('\n‚úÖ Todos os testes passaram! Sistema funcionando corretamente.');
      return true;
    }
    
  } catch (error) {
    console.error('üí• Erro fatal durante os testes:', error);
    return false;
  } finally {
    if (browser) {
      await browser.close();
      console.log('üßπ Navegador fechado.');
    }
  }
}

// Executar teste
testIdososSocial().then(success => {
  process.exit(success ? 0 : 1);
}).catch(error => {
  console.error('üí• Erro fatal:', error);
  process.exit(1);
});
