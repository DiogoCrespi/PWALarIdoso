import { test, expect } from '@playwright/test';

test.describe('Teste Simples de Verifica√ß√£o de Duplicatas', () => {
  test.beforeEach(async ({ page }) => {
    // Navegar para a aplica√ß√£o
    await page.goto('/');
    
    // Aguardar a aplica√ß√£o carregar completamente
    await page.waitForLoadState('networkidle');
    
    // Aguardar a inicializa√ß√£o do sistema (se aparecer)
    try {
      await page.waitForSelector('text=Inicializando sistema...', { timeout: 5000 });
      await page.waitForSelector('text=Inicializando sistema...', { state: 'hidden', timeout: 30000 });
    } catch (error) {
      // Se n√£o aparecer a tela de inicializa√ß√£o, continuar
      console.log('Tela de inicializa√ß√£o n√£o apareceu, continuando...');
    }
  });

  test('Deve detectar duplicata ao criar respons√°vel com nome existente', async ({ page }) => {
    console.log('üß™ Iniciando teste de duplicata de respons√°vel...');

    // 1. Navegar para respons√°veis
    await page.click('text=Respons√°veis');
    await page.waitForTimeout(1000);

    // 2. Clicar em "Novo Respons√°vel"
    await page.click('button:has-text("Novo Respons√°vel")');
    await page.waitForTimeout(500);

    // 3. Preencher dados
    await page.fill('input[label="Nome Completo"]', 'Jo√£o Silva');
    await page.fill('input[label="CPF"]', '123.456.789-00');
    await page.fill('input[label="Telefone"]', '(11) 99999-9999');
    await page.fill('input[label="Email"]', 'joao@teste.com');

    // 4. Clicar em Salvar
    await page.click('button:has-text("Salvar")');
    await page.waitForTimeout(2000);

    // 5. Verificar se aparece o di√°logo de duplicatas
    const duplicateDialog = page.locator('text=Respons√°vel Similar Encontrado');
    await expect(duplicateDialog).toBeVisible({ timeout: 10000 });
    
    console.log('‚úÖ Di√°logo de duplicatas apareceu corretamente!');

    // 6. Verificar op√ß√µes dispon√≠veis
    await expect(page.locator('button:has-text("Criar Novo")')).toBeVisible();
    await expect(page.locator('button:has-text("Usar")')).toBeVisible();
    
    console.log('‚úÖ Op√ß√µes de escolha est√£o dispon√≠veis!');

    // 7. Fechar di√°logo
    await page.click('button:has-text("Cancelar")');
    
    console.log('‚úÖ Teste de duplicata de respons√°vel conclu√≠do!');
  });

  test('Deve permitir usar respons√°vel existente', async ({ page }) => {
    console.log('üß™ Iniciando teste de uso de respons√°vel existente...');

    // 1. Navegar para respons√°veis
    await page.click('text=Respons√°veis');
    await page.waitForTimeout(1000);

    // 2. Criar respons√°vel duplicado
    await page.click('button:has-text("Novo Respons√°vel")');
    await page.waitForTimeout(500);

    await page.fill('input[label="Nome Completo"]', 'Jo√£o Silva');
    await page.fill('input[label="CPF"]', '123.456.789-00');
    await page.click('button:has-text("Salvar")');
    await page.waitForTimeout(2000);

    // 3. Aguardar di√°logo de duplicatas
    await expect(page.locator('text=Respons√°vel Similar Encontrado')).toBeVisible();

    // 4. Clicar em "Usar" no primeiro respons√°vel
    const useButtons = page.locator('button:has-text("Usar")');
    await useButtons.first().click();
    await page.waitForTimeout(1000);

    // 5. Verificar se modal fechou
    await expect(page.locator('text=Novo Respons√°vel')).not.toBeVisible();
    
    console.log('‚úÖ Respons√°vel existente foi usado corretamente!');
  });

  test('Deve permitir criar novo respons√°vel mesmo com duplicatas', async ({ page }) => {
    console.log('üß™ Iniciando teste de cria√ß√£o com duplicatas...');

    // 1. Navegar para respons√°veis
    await page.click('text=Respons√°veis');
    await page.waitForTimeout(1000);

    // 2. Criar respons√°vel com nome duplicado mas CPF diferente
    await page.click('button:has-text("Novo Respons√°vel")');
    await page.waitForTimeout(500);

    await page.fill('input[label="Nome Completo"]', 'Jo√£o Silva');
    await page.fill('input[label="CPF"]', '987.654.321-00'); // CPF diferente
    await page.fill('input[label="Telefone"]', '(11) 88888-8888');
    await page.click('button:has-text("Salvar")');
    await page.waitForTimeout(2000);

    // 3. Aguardar di√°logo de duplicatas
    await expect(page.locator('text=Respons√°vel Similar Encontrado')).toBeVisible();

    // 4. Clicar em "Criar Novo"
    await page.click('button:has-text("Criar Novo")');
    await page.waitForTimeout(2000);

    // 5. Verificar se modal fechou
    await expect(page.locator('text=Novo Respons√°vel')).not.toBeVisible();
    
    console.log('‚úÖ Novo respons√°vel foi criado mesmo com duplicatas!');
  });

  test('Deve detectar duplicata ao criar idoso com nome existente', async ({ page }) => {
    console.log('üß™ Iniciando teste de duplicata de idoso...');

    // 1. Navegar para idosos
    await page.click('text=Idosos');
    await page.waitForTimeout(1000);

    // 2. Clicar em "Novo Idoso"
    await page.click('button:has-text("Novo Idoso")');
    await page.waitForTimeout(500);

    // 3. Preencher dados b√°sicos
    await page.fill('input[label="Nome"]', 'Maria Santos');
    await page.fill('input[label="CPF"]', '111.222.333-44');

    // 4. Selecionar respons√°vel (primeiro da lista)
    await page.click('div[role="combobox"]');
    await page.waitForTimeout(500);
    await page.click('li:first-child');

    // 5. Preencher mensalidade
    await page.fill('input[label="Valor da Mensalidade"]', '1500');

    // 6. Clicar em Salvar
    await page.click('button:has-text("Salvar")');
    await page.waitForTimeout(2000);

    // 7. Verificar se aparece o di√°logo de duplicatas
    const duplicateDialog = page.locator('text=Idoso Similar Encontrado');
    await expect(duplicateDialog).toBeVisible({ timeout: 10000 });
    
    console.log('‚úÖ Di√°logo de duplicatas de idoso apareceu corretamente!');

    // 8. Fechar di√°logo
    await page.click('button:has-text("Cancelar")');
    
    console.log('‚úÖ Teste de duplicata de idoso conclu√≠do!');
  });

  test('Deve gerar logs durante verifica√ß√£o de duplicatas', async ({ page }) => {
    console.log('üß™ Iniciando teste de logs...');

    // Capturar logs do console
    const logs: string[] = [];
    page.on('console', msg => {
      if (msg.type() === 'log' || msg.type() === 'info') {
        logs.push(msg.text());
      }
    });

    // 1. Navegar para respons√°veis
    await page.click('text=Respons√°veis');
    await page.waitForTimeout(1000);

    // 2. Criar respons√°vel duplicado
    await page.click('button:has-text("Novo Respons√°vel")');
    await page.waitForTimeout(500);

    await page.fill('input[label="Nome Completo"]', 'Jo√£o Silva');
    await page.fill('input[label="CPF"]', '123.456.789-00');
    await page.click('button:has-text("Salvar")');
    await page.waitForTimeout(2000);

    // 3. Aguardar verifica√ß√£o
    await expect(page.locator('text=Respons√°vel Similar Encontrado')).toBeVisible();

    // 4. Verificar se logs foram gerados
    const duplicateLogs = logs.filter(log => 
      log.includes('Verificando duplicatas') || 
      log.includes('Duplicatas encontradas') ||
      log.includes('DUPLICATE_CHECK')
    );

    expect(duplicateLogs.length).toBeGreaterThan(0);
    console.log('‚úÖ Logs de duplicatas encontrados:', duplicateLogs);

    // 5. Fechar di√°logo
    await page.click('button:has-text("Cancelar")');
    
    console.log('‚úÖ Teste de logs conclu√≠do!');
  });

  test('Deve n√£o verificar duplicatas ao editar respons√°vel existente', async ({ page }) => {
    console.log('üß™ Iniciando teste de edi√ß√£o sem verifica√ß√£o...');

    // 1. Navegar para respons√°veis
    await page.click('text=Respons√°veis');
    await page.waitForTimeout(1000);

    // 2. Tentar editar o primeiro respons√°vel da lista
    const firstResponsavel = page.locator('[data-testid="responsavel-item"], .MuiListItem-root').first();
    if (await firstResponsavel.count() > 0) {
      await firstResponsavel.click();
      await page.waitForTimeout(500);

      // 3. Clicar no menu de a√ß√µes
      const actionButton = page.locator('button[aria-label="A√ß√µes"], button:has-text("‚ãÆ")').first();
      if (await actionButton.count() > 0) {
        await actionButton.click();
        await page.waitForTimeout(500);

        // 4. Clicar em Editar
        await page.click('text=Editar');
        await page.waitForTimeout(1000);

        // 5. Verificar se modal de edi√ß√£o abriu
        await expect(page.locator('text=Editar Respons√°vel')).toBeVisible();

        // 6. Modificar nome
        await page.fill('input[label="Nome Completo"]', 'Jo√£o Silva Editado');
        await page.click('button:has-text("Salvar")');
        await page.waitForTimeout(2000);

        // 7. Verificar que n√£o aparece di√°logo de duplicatas
        await expect(page.locator('text=Respons√°vel Similar Encontrado')).not.toBeVisible();
        
        console.log('‚úÖ Edi√ß√£o funcionou sem verifica√ß√£o de duplicatas!');
      } else {
        console.log('‚ö†Ô∏è Bot√£o de a√ß√µes n√£o encontrado, pulando teste de edi√ß√£o');
      }
    } else {
      console.log('‚ö†Ô∏è Nenhum respons√°vel encontrado na lista, pulando teste de edi√ß√£o');
    }
  });
});
