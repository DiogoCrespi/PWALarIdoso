import puppeteer from 'puppeteer';

async function runAutomatedTests() {
  console.log('üöÄ Iniciando testes automatizados com Puppeteer...');
  
  const browser = await puppeteer.launch({ 
    headless: false, // Mostrar o navegador para debug
    slowMo: 100, // Delay entre a√ß√µes para visualizar
    devtools: true // Abrir DevTools automaticamente
  });
  
  const page = await browser.newPage();
  
  // Capturar logs do console
  page.on('console', msg => {
    console.log(`üì± CONSOLE [${msg.type()}]:`, msg.text());
  });
  
  // Capturar erros
  page.on('pageerror', error => {
    console.error('‚ùå ERRO DA P√ÅGINA:', error.message);
  });
  
  try {
    console.log('üåê Navegando para http://localhost:5173...');
    await page.goto('http://localhost:5173', { waitUntil: 'networkidle0' });
    
    // Aguardar carregamento inicial
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('‚úÖ P√°gina carregada com sucesso!');
    
    // TESTE 1: Verificar se a p√°gina carregou
    console.log('\nüß™ TESTE 1: Verificando carregamento da p√°gina...');
    const title = await page.title();
    console.log('üìÑ T√≠tulo da p√°gina:', title);
    
    // TESTE 2: Navegar para Respons√°veis
    console.log('\nüß™ TESTE 2: Navegando para p√°gina de Respons√°veis...');
    
    // Tentar navegar diretamente para a URL
    try {
      await page.goto('http://localhost:5173/responsaveis', { waitUntil: 'networkidle0' });
      console.log('‚úÖ Navega√ß√£o direta para /responsaveis realizada!');
    } catch (error) {
      console.log('‚ùå Erro ao navegar para /responsaveis:', error.message);
    }
    
    // Aguardar carregamento da p√°gina de respons√°veis
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // TESTE 3: Verificar se a p√°gina de respons√°veis carregou
    console.log('\nüß™ TESTE 3: Verificando p√°gina de Respons√°veis...');
    
    try {
      await page.waitForSelector('h1', { timeout: 5000 });
      const heading = await page.$eval('h1', el => el.textContent);
      console.log('üìÑ Cabe√ßalho da p√°gina:', heading);
    } catch (error) {
      console.log('‚ùå Cabe√ßalho n√£o encontrado:', error.message);
    }
    
    // TESTE 4: Verificar se h√° respons√°veis na lista
    console.log('\nüß™ TESTE 4: Verificando lista de respons√°veis...');
    
    try {
      // Aguardar cards de respons√°veis ou mensagem de "nenhum respons√°vel"
      await page.waitForSelector('.MuiCard-root, .MuiAlert-root', { timeout: 5000 });
      
      const cards = await page.$$('.MuiCard-root');
      const alerts = await page.$$('.MuiAlert-root');
      
      console.log(`üìä Cards encontrados: ${cards.length}`);
      console.log(`üìä Alerts encontrados: ${alerts.length}`);
      
      if (cards.length > 0) {
        console.log('‚úÖ Lista de respons√°veis carregada!');
      } else if (alerts.length > 0) {
        const alertText = await page.$eval('.MuiAlert-root', el => el.textContent);
        console.log('‚ÑπÔ∏è Mensagem da lista:', alertText);
      }
    } catch (error) {
      console.log('‚ùå Lista de respons√°veis n√£o encontrada:', error.message);
    }
    
    // TESTE 5: Clicar em "Novo Respons√°vel"
    console.log('\nüß™ TESTE 5: Testando bot√£o "Novo Respons√°vel"...');
    
    // Debug: Ver todos os bot√µes na p√°gina
    const buttons = await page.$$('button');
    console.log(`üìä Total de bot√µes encontrados: ${buttons.length}`);
    
    for (let i = 0; i < buttons.length; i++) {
      const buttonText = await page.evaluate(el => el.textContent, buttons[i]);
      console.log(`üîò Bot√£o ${i + 1}: "${buttonText}"`);
    }
    
    try {
      // Procurar bot√£o "Novo Respons√°vel" - usar seletor mais espec√≠fico
      try {
        // Tentar clicar no segundo bot√£o (√≠ndice 1)
        await page.click('button:nth-child(2)', { timeout: 3000 });
        console.log('‚úÖ Bot√£o "Novo Respons√°vel" clicado!');
        
        // Aguardar modal abrir
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Verificar se o modal abriu
        const modal = await page.$('.MuiDialog-root');
        if (modal) {
          console.log('‚úÖ Modal de novo respons√°vel aberto!');
          
          // TESTE 6: Preencher formul√°rio
          console.log('\nüß™ TESTE 6: Preenchendo formul√°rio...');
          
          // Preencher nome
          try {
            // Limpar campo primeiro
            await page.click('input[type="text"]');
            await page.keyboard.down('Control');
            await page.keyboard.press('KeyA');
            await page.keyboard.up('Control');
            await page.keyboard.press('Delete');
            // Preencher com "teste"
            await page.type('input[type="text"]', 'teste');
            console.log('‚úÖ Nome preenchido com "teste"!');
          } catch (error) {
            console.log('‚ùå Erro ao preencher nome:', error.message);
          }
          
          // Preencher CPF
          try {
            // Limpar campo CPF primeiro
            await page.click('input[placeholder*="000.000.000-00"]');
            await page.keyboard.down('Control');
            await page.keyboard.press('KeyA');
            await page.keyboard.up('Control');
            await page.keyboard.press('Delete');
            // Preencher com CPF v√°lido
            await page.type('input[placeholder*="000.000.000-00"]', '10294484930');
            console.log('‚úÖ CPF preenchido com CPF v√°lido: 102.944.849-30!');
          } catch (error) {
            console.log('‚ùå Erro ao preencher CPF:', error.message);
          }
          
          // Preencher telefone (se existir)
          try {
            await page.type('input[placeholder*="(00) 00000-0000"]', '45999999999');
            console.log('‚úÖ Telefone preenchido!');
          } catch (error) {
            console.log('‚ÑπÔ∏è Campo telefone n√£o encontrado ou n√£o obrigat√≥rio');
          }
          
          // Preencher email (se existir)
          try {
            await page.type('input[type="email"]', 'joao@teste.com');
            console.log('‚úÖ Email preenchido!');
          } catch (error) {
            console.log('‚ÑπÔ∏è Campo email n√£o encontrado ou n√£o obrigat√≥rio');
          }
          
          // TESTE 7: Salvar respons√°vel
          console.log('\nüß™ TESTE 7: Salvando respons√°vel...');
          
          // Clicar no bot√£o Salvar
          try {
            await page.click('button.MuiButton-containedPrimary', { timeout: 3000 });
            console.log('‚úÖ Bot√£o Salvar clicado!');
            
            // Aguardar processamento
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // Verificar se houve feedback
            const alerts = await page.$$('.MuiAlert-root');
            if (alerts.length > 0) {
              const alertText = await page.$eval('.MuiAlert-root', el => el.textContent);
              console.log('üì¢ Feedback encontrado:', alertText);
            } else {
              console.log('‚ö†Ô∏è Nenhum feedback visual encontrado');
            }
            
            // Verificar se h√° mensagens de sucesso ou erro
            const snackbars = await page.$$('.MuiSnackbar-root');
            if (snackbars.length > 0) {
              const snackbarText = await page.$eval('.MuiSnackbar-root', el => el.textContent);
              console.log('üçø Snackbar encontrado:', snackbarText);
            }
            
            // Verificar se h√° toasts ou notifica√ß√µes
            const toasts = await page.$$('[role="alert"], .MuiAlert-root, .toast, .notification');
            console.log(`üìä Total de elementos de feedback: ${toasts.length}`);
            for (let i = 0; i < toasts.length; i++) {
              const toastText = await page.evaluate(el => el.textContent, toasts[i]);
              console.log(`üîî Feedback ${i + 1}: "${toastText}"`);
            }
            
            // Verificar se o modal fechou
            const modalAindaAberto = await page.$('.MuiDialog-root');
            if (!modalAindaAberto) {
              console.log('‚úÖ Modal fechou ap√≥s salvar!');
            } else {
              console.log('‚ö†Ô∏è Modal ainda est√° aberto');
            }
            
          } catch (error) {
            console.log('‚ùå Bot√£o Salvar n√£o encontrado!');
          }
          
        } else {
          console.log('‚ùå Modal n√£o abriu!');
        }
        
      } catch (error) {
        console.log('‚ùå Bot√£o "Novo Respons√°vel" n√£o encontrado!');
      }
      
    } catch (error) {
      console.log('‚ùå Erro ao testar bot√£o "Novo Respons√°vel":', error.message);
    }
    
    // Aguardar um pouco antes de fechar
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('\n‚úÖ Testes automatizados conclu√≠dos!');
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
  } finally {
    await browser.close();
  }
}

// Executar os testes
runAutomatedTests().catch(console.error);
