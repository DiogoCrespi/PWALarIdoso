import puppeteer from 'puppeteer';

async function testCreateUsers() {
  console.log('üë• Teste de cria√ß√£o de usu√°rios SOCIAL e REGULAR...');
  
  let browser;
  try {
    browser = await puppeteer.launch({
      headless: false,
      slowMo: 300,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    await page.setViewport({ width: 1280, height: 720 });
    
    console.log('üåê Navegando para a aplica√ß√£o...');
    await page.goto('http://localhost:5174', { waitUntil: 'networkidle0', timeout: 30000 });
    
    // Aguardar inicializa√ß√£o
    try {
      await page.waitForSelector('text=Inicializando sistema...', { timeout: 5000 });
      console.log('‚è≥ Aguardando inicializa√ß√£o...');
      await page.waitForSelector('text=Inicializando sistema...', { state: 'hidden', timeout: 30000 });
    } catch (e) {
      console.log('‚ÑπÔ∏è Inicializa√ß√£o n√£o detectada, continuando...');
    }
    
    console.log('‚úÖ Aplica√ß√£o carregada!');
    
    let passedTests = 0;
    let failedTests = 0;

    // --- TESTE 1: Criar respons√°vel primeiro ---
    console.log('\nüß™ TESTE 1: Criando respons√°vel para teste');
    try {
      // Navegar para respons√°veis
      const responsaveisLink = await page.evaluateHandle(() => {
        const elements = Array.from(document.querySelectorAll('a, [role="button"]'));
        return elements.find(el => el.textContent && el.textContent.includes('Respons√°veis'));
      });
      
      if (responsaveisLink) {
        await responsaveisLink.click();
        console.log('‚úÖ Navegou para p√°gina de respons√°veis');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Procurar bot√£o "Novo Respons√°vel"
        const novoResponsavelButton = await page.evaluateHandle(() => {
          const buttons = Array.from(document.querySelectorAll('button'));
          return buttons.find(btn => btn.textContent && btn.textContent.includes('Novo Respons√°vel'));
        });
        
        if (novoResponsavelButton) {
          await novoResponsavelButton.click();
          console.log('‚úÖ Modal de novo respons√°vel aberto');
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // Preencher dados do respons√°vel
          await page.type('input[label="Nome Completo"]', 'Maria Teste Social');
          await page.type('input[label="CPF"]', '111.222.333-44');
          await page.type('input[label="Telefone"]', '(11) 99999-8888');
          await page.type('input[label="Email"]', 'maria@teste.com');
          
          // Salvar respons√°vel
          const salvarButton = await page.evaluateHandle(() => {
            const buttons = Array.from(document.querySelectorAll('button'));
            return buttons.find(btn => btn.textContent && btn.textContent.includes('Salvar'));
          });
          
          if (salvarButton) {
            await salvarButton.click();
            console.log('‚úÖ Respons√°vel criado com sucesso');
            await new Promise(resolve => setTimeout(resolve, 2000));
            passedTests++;
          } else {
            console.log('‚ùå Bot√£o Salvar n√£o encontrado');
            failedTests++;
          }
        } else {
          console.log('‚ùå Bot√£o "Novo Respons√°vel" n√£o encontrado');
          failedTests++;
        }
      } else {
        console.log('‚ùå Link "Respons√°veis" n√£o encontrado');
        failedTests++;
      }
      
    } catch (error) {
      console.log('‚ùå Erro ao criar respons√°vel:', error.message);
      failedTests++;
    }

    // --- TESTE 2: Criar idoso SOCIAL ---
    console.log('\nüß™ TESTE 2: Criando idoso SOCIAL');
    try {
      // Navegar para idosos
      const idososLink = await page.evaluateHandle(() => {
        const elements = Array.from(document.querySelectorAll('a, [role="button"]'));
        return elements.find(el => el.textContent && el.textContent.includes('Idosos'));
      });
      
      if (idososLink) {
        await idososLink.click();
        console.log('‚úÖ Navegou para p√°gina de idosos');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Procurar bot√£o "Novo Idoso"
        const novoIdosoButton = await page.evaluateHandle(() => {
          const buttons = Array.from(document.querySelectorAll('button'));
          return buttons.find(btn => btn.textContent && btn.textContent.includes('Novo Idoso'));
        });
        
        if (novoIdosoButton) {
          await novoIdosoButton.click();
          console.log('‚úÖ Modal de novo idoso aberto');
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // Preencher dados b√°sicos
          await page.type('input[label="Nome Completo"]', 'Jo√£o Social Silva');
          await page.type('input[label="CPF/CNPJ do Idoso"]', '555.666.777-88');
          
          // Selecionar respons√°vel
          const responsavelDropdown = await page.evaluateHandle(() => {
            const dropdowns = Array.from(document.querySelectorAll('div[role="button"]'));
            return dropdowns.find(dropdown => dropdown.textContent && dropdown.textContent.includes('Respons√°vel'));
          });
          
          if (responsavelDropdown) {
            await responsavelDropdown.click();
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const responsavelOption = await page.evaluateHandle(() => {
              const options = Array.from(document.querySelectorAll('li'));
              return options.find(option => option.textContent && option.textContent.includes('Maria Teste Social'));
            });
            
            if (responsavelOption) {
              await responsavelOption.click();
              console.log('‚úÖ Respons√°vel selecionado');
            }
          }
          
          // Preencher benef√≠cio (sal√°rio)
          await page.type('input[label="Benef√≠cio (Sal√°rio do Idoso)"]', '1518,00');
          console.log('‚úÖ Benef√≠cio preenchido: R$ 1.518,00');
          
          // Selecionar tipo SOCIAL
          const tipoDropdown = await page.evaluateHandle(() => {
            const dropdowns = Array.from(document.querySelectorAll('div[role="button"]'));
            return dropdowns.find(dropdown => dropdown.textContent && dropdown.textContent.includes('Tipo do Idoso'));
          });
          
          if (tipoDropdown) {
            await tipoDropdown.click();
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const socialOption = await page.evaluateHandle(() => {
              const options = Array.from(document.querySelectorAll('li'));
              return options.find(option => option.textContent && option.textContent.includes('SOCIAL'));
            });
            
            if (socialOption) {
              await socialOption.click();
              console.log('‚úÖ Tipo SOCIAL selecionado');
              await new Promise(resolve => setTimeout(resolve, 1000));
              
              // Verificar se mensalidade foi preenchida automaticamente
              const mensalidadeValue = await page.inputValue('input[label="Valor da Mensalidade"]');
              console.log('üìä Valor da mensalidade:', mensalidadeValue);
              
              if (mensalidadeValue.includes('1518')) {
                console.log('‚úÖ Mensalidade preenchida automaticamente para SOCIAL');
                passedTests++;
              } else {
                console.log('‚ùå Mensalidade n√£o foi preenchida automaticamente');
                failedTests++;
              }
              
              // Verificar se campo est√° desabilitado
              const isDisabled = await page.evaluate(() => {
                const input = document.querySelector('input[label="Valor da Mensalidade"]');
                return input ? input.disabled : false;
              });
              
              if (isDisabled) {
                console.log('‚úÖ Campo mensalidade desabilitado para SOCIAL');
                passedTests++;
              } else {
                console.log('‚ùå Campo mensalidade n√£o est√° desabilitado para SOCIAL');
                failedTests++;
              }
            }
          }
          
          // Salvar idoso SOCIAL
          const salvarButton = await page.evaluateHandle(() => {
            const buttons = Array.from(document.querySelectorAll('button'));
            return buttons.find(btn => btn.textContent && btn.textContent.includes('Salvar'));
          });
          
          if (salvarButton) {
            await salvarButton.click();
            console.log('‚úÖ Idoso SOCIAL criado com sucesso');
            await new Promise(resolve => setTimeout(resolve, 2000));
            passedTests++;
          } else {
            console.log('‚ùå Bot√£o Salvar n√£o encontrado');
            failedTests++;
          }
        } else {
          console.log('‚ùå Bot√£o "Novo Idoso" n√£o encontrado');
          failedTests++;
        }
      } else {
        console.log('‚ùå Link "Idosos" n√£o encontrado');
        failedTests++;
      }
      
    } catch (error) {
      console.log('‚ùå Erro ao criar idoso SOCIAL:', error.message);
      failedTests++;
    }

    // --- TESTE 3: Criar idoso REGULAR ---
    console.log('\nüß™ TESTE 3: Criando idoso REGULAR');
    try {
      // Procurar bot√£o "Novo Idoso" novamente
      const novoIdosoButton = await page.evaluateHandle(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        return buttons.find(btn => btn.textContent && btn.textContent.includes('Novo Idoso'));
      });
      
      if (novoIdosoButton) {
        await novoIdosoButton.click();
        console.log('‚úÖ Modal de novo idoso aberto');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Preencher dados b√°sicos
        await page.type('input[label="Nome Completo"]', 'Ana Regular Santos');
        await page.type('input[label="CPF/CNPJ do Idoso"]', '999.888.777-66');
        
        // Selecionar respons√°vel
        const responsavelDropdown = await page.evaluateHandle(() => {
          const dropdowns = Array.from(document.querySelectorAll('div[role="button"]'));
          return dropdowns.find(dropdown => dropdown.textContent && dropdown.textContent.includes('Respons√°vel'));
        });
        
        if (responsavelDropdown) {
          await responsavelDropdown.click();
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          const responsavelOption = await page.evaluateHandle(() => {
            const options = Array.from(document.querySelectorAll('li'));
            return options.find(option => option.textContent && option.textContent.includes('Maria Teste Social'));
          });
          
          if (responsavelOption) {
            await responsavelOption.click();
            console.log('‚úÖ Respons√°vel selecionado');
          }
        }
        
        // Preencher benef√≠cio (sal√°rio)
        await page.type('input[label="Benef√≠cio (Sal√°rio do Idoso)"]', '1518,00');
        console.log('‚úÖ Benef√≠cio preenchido: R$ 1.518,00');
        
        // Preencher mensalidade (valor diferente)
        await page.type('input[label="Valor da Mensalidade"]', '3225,00');
        console.log('‚úÖ Mensalidade preenchida: R$ 3.225,00');
        
        // Selecionar tipo REGULAR
        const tipoDropdown = await page.evaluateHandle(() => {
          const dropdowns = Array.from(document.querySelectorAll('div[role="button"]'));
          return dropdowns.find(dropdown => dropdown.textContent && dropdown.textContent.includes('Tipo do Idoso'));
        });
        
        if (tipoDropdown) {
          await tipoDropdown.click();
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          const regularOption = await page.evaluateHandle(() => {
            const options = Array.from(document.querySelectorAll('li'));
            return options.find(option => option.textContent && option.textContent.includes('REGULAR'));
          });
          
          if (regularOption) {
            await regularOption.click();
            console.log('‚úÖ Tipo REGULAR selecionado');
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // Verificar se campo mensalidade est√° habilitado
            const isEnabled = await page.evaluate(() => {
              const input = document.querySelector('input[label="Valor da Mensalidade"]');
              return input ? !input.disabled : false;
            });
            
            if (isEnabled) {
              console.log('‚úÖ Campo mensalidade habilitado para REGULAR');
              passedTests++;
            } else {
              console.log('‚ùå Campo mensalidade n√£o est√° habilitado para REGULAR');
              failedTests++;
            }
            
            // Verificar se mensalidade pode ser editada
            const mensalidadeValue = await page.inputValue('input[label="Valor da Mensalidade"]');
            if (mensalidadeValue.includes('3225')) {
              console.log('‚úÖ Mensalidade pode ser editada para REGULAR');
              passedTests++;
            } else {
              console.log('‚ùå Mensalidade n√£o pode ser editada para REGULAR');
              failedTests++;
            }
          }
        }
        
        // Salvar idoso REGULAR
        const salvarButton = await page.evaluateHandle(() => {
          const buttons = Array.from(document.querySelectorAll('button'));
          return buttons.find(btn => btn.textContent && btn.textContent.includes('Salvar'));
        });
        
        if (salvarButton) {
          await salvarButton.click();
          console.log('‚úÖ Idoso REGULAR criado com sucesso');
          await new Promise(resolve => setTimeout(resolve, 2000));
          passedTests++;
        } else {
          console.log('‚ùå Bot√£o Salvar n√£o encontrado');
          failedTests++;
        }
      } else {
        console.log('‚ùå Bot√£o "Novo Idoso" n√£o encontrado');
        failedTests++;
      }
      
    } catch (error) {
      console.log('‚ùå Erro ao criar idoso REGULAR:', error.message);
      failedTests++;
    }

    // --- TESTE 4: Verificar se idosos foram criados ---
    console.log('\nüß™ TESTE 4: Verificando se idosos foram criados');
    try {
      // Verificar se h√° idosos na lista
      const idososList = await page.evaluate(() => {
        const elements = Array.from(document.querySelectorAll('*'));
        return elements.some(el => el.textContent && el.textContent.includes('Jo√£o Social Silva')) &&
               elements.some(el => el.textContent && el.textContent.includes('Ana Regular Santos'));
      });
      
      if (idososList) {
        console.log('‚úÖ Ambos os idosos aparecem na lista');
        passedTests++;
      } else {
        console.log('‚ùå Idosos n√£o aparecem na lista');
        failedTests++;
      }
      
    } catch (error) {
      console.log('‚ùå Erro ao verificar lista de idosos:', error.message);
      failedTests++;
    }

    console.log('\nüéâ Testes de cria√ß√£o de usu√°rios conclu√≠dos!');
    console.log(`üìä Resumo: ${passedTests} testes passaram, ${failedTests} falharam.`);
    
    if (failedTests > 0) {
      console.log('\n‚ùå Alguns testes falharam. Verifique os logs acima.');
      return false;
    } else {
      console.log('\n‚úÖ Todos os testes passaram!');
      console.log('‚úÖ Sistema de cria√ß√£o de usu√°rios SOCIAL e REGULAR funcionando!');
      return true;
    }
    
  } catch (error) {
    console.error('üí• Erro fatal durante os testes:', error);
    return false;
  } finally {
    if (browser) {
      await browser.close();
      console.log('üßπ Navegador fechado.');
    }
  }
}

// Executar teste
testCreateUsers().then(success => {
  if (success) {
    console.log('\nüèÜ TESTE DE CRIA√á√ÉO CONCLU√çDO COM SUCESSO!');
    console.log('‚úÖ Usu√°rios SOCIAL e REGULAR criados com sucesso!');
    console.log('‚úÖ Funcionalidades implementadas corretamente!');
  } else {
    console.log('\n‚ùå TESTE DE CRIA√á√ÉO FALHOU!');
    console.log('üîß Verifique a implementa√ß√£o.');
  }
  process.exit(success ? 0 : 1);
}).catch(error => {
  console.error('üí• Erro fatal:', error);
  process.exit(1);
});
